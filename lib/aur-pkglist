#!/bin/bash
# aur-pkglist - print the AUR package list
set -o errexit
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=pkglist
XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}
AUR_LOCATION=${AUR_LOCATION:-'https://aur.archlinux.org'}
AUR_ARCHIVE=${AUR_ARCHIVE:-$AUR_LOCATION/archives}
AUR_ARCHIVE_ROOT=${AUR_ARCHIVE_ROOT:-$XDG_STATE_HOME/aurweb-archive}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
export GIT_HTTP_USER_AGENT=aurutils

# default arguments
ttl=600 depth=1 mode=json pkglist=pkgname.json archive=pkgnames use_system_time=0 use_gc=0

usage() {
    printf >&2 'usage: %s [-bqsi] [-t ttl]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='t:biqun'
opt_long=('pkgbase' 'pkgname' 'ttl:' 'users' 'quiet' 'systime' 'info'
          'info-pkgname' 'info-pkgbase' 'gc' 'plain' 'depth:')
opt_hidden=('dump-options' 'time:')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset depth_args
while true; do
    case "$1" in
        -b|--pkgbase)
            pkglist=pkgbase.json; archive=pkgbases ;;
        -n|--pkgname)
            pkglist=pkgname.json; archive=pkgnames ;;
        --users)
            pkglist=users.json; archive=users ;;
        --info-pkgname)
            pkglist=pkgname.json; archive=metadata ;;
        --info-pkgbase)
            pkglist=pkgbase.json; archive=metadata ;;
        -i|--info)
            pkglist=merged.json; archive=metadata ;;
        -q|--quiet)
            mode=none ;;
        -u)
            mode=none ;; # deprecated
        -t|--time|--ttl)
            shift; ttl=$1 ;;
        --systime)
            use_system_time=1 ;;
        --plain)
            mode=plain ;;
        --gc)
            use_gc=1 ;;
        --depth)
            shift; depth=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

if [[ $mode == "plain" ]] && [[ $archive == "metadata" ]]; then
    printf >&2 'error: --plain cannot be used with --info\n'
    exit 1

elif ! [[ $ttl =~ -?[0-9]+ ]]; then
    printf >&2 "error: --ttl requires an integer ('%s' provided)\n" "$ttl"
    exit 1

elif ! [[ $depth =~ -?[0-9]+ ]]; then
    printf >&2 "error: --depth requires an integer ('%s' provided)\n" "$depth"
    exit 1
fi

mkdir -p "$AUR_ARCHIVE_ROOT"

if (( depth >= 1 )); then
    depth_args+=(--depth "$depth")
fi

# Retrieve new metadata revisions from aurweb
if [[ ! -d $AUR_ARCHIVE_ROOT/$archive/.git ]]; then
    git clone "${depth_args[@]}" "$AUR_ARCHIVE/$archive".git "$AUR_ARCHIVE_ROOT/$archive"

else
    git() { command git -C "$AUR_ARCHIVE_ROOT/$archive" "$@"; }

    update=0
    if (( ttl < 0 )); then
        :
    elif (( use_system_time )); then
        sec_l=$(git log -1 --pretty="format:%ct")
        sec_d=$(date '+%s')

        if (( sec_d - sec_l > ttl )); then
            update=1
        fi
    else
        update=1
    fi

    if (( update )); then
        git fetch --quiet "${depth_args[@]}"

        if [[ $(git rev-parse HEAD) != $(git rev-parse FETCH_HEAD) ]]; then
            git reset --hard FETCH_HEAD
        fi
    fi

    if (( use_gc )); then
        git gc --aggressive
    fi
fi >&2

cd "$AUR_ARCHIVE_ROOT/$archive"

# Create merged archive
if [[ $pkglist == 'merged.json' ]]; then
    aur pkglist--merge -n 'pkgname.json' -b 'pkgbase.json' > merged.json
fi

case $mode in
    json)
        # Remove indentation for aur-format pipelines
        tr -d '\n' < "$pkglist" | tr -s ' '
        printf '\n' ;;
    plain)
        # Relies on `pkgname` containing alphanumerics and @ . _ + -
        tr -d '"][ ' < "$pkglist" | tr -s ',' '\n' ;;
    none)
        printf '%s\n' "$PWD/$pkglist" ;;
esac

# vim: set et sw=4 sts=4 ft=sh:
